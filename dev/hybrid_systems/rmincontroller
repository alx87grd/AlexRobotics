#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr  8 00:14:29 2022

@author: alex
"""

###############################################################################
import numpy as np
from scipy.interpolate import interp1d
###############################################################################
from pyro.control.nonlinear import ComputedTorqueController
###############################################################################


###############################################################################
# Computed Torque
###############################################################################
        
class RminComputedTorqueController( ComputedTorqueController ) :
    """ 
    Inverse dynamic controller for mechanical system

    """    
    
    ############################
    def __init__(self, model  , traj = None ):
        """
        ---------------------------------------
        r  : reference signal vector  k x 1
        y  : sensor signal vector     p x 1
        u  : control inputs vector    m x 1
        t  : time                     1 x 1
        ---------------------------------------
        u = c( y , r , t )
        
        """
        
        super().__init__( model , traj )
        
        # Label
        self.name = 'R min Computed Torque Controller'
        
        self.modes_options = model.k
        
    
    #############################
    def c_fixed_goal( self , y , r , t = 0 ):
        """ 
        Feedback static computation u = c(y,r,t)
        
        INPUTS
        y  : sensor signal vector     p x 1
        r  : reference signal vector  k x 1
        t  : time                     1 x 1
        
        OUPUTS
        u  : control inputs vector    m x 1
        
        """
                
        x   = y 
        q_d = r
        
        u = self.fixed_goal_ctl( x , q_d , t )
        
        return u
    
        
        
    ############################
    def fixed_goal_ctl( self , x , q_d , t = 0 ):
        """ 
        
        Given desired fixed goal state and actual state, compute torques
        
        """
        [ q , dq ]     = self.model.x2q( x )  
        
        ddq_d          =   np.zeros( self.model.dof )
        dq_d           =   np.zeros( self.model.dof )

        ddq_r          = self.compute_ddq_r( ddq_d , dq_d , q_d , dq , q )
        
        u              = self.rmin_forces( q , dq , ddq_r )
       
        return u
    
    
    ############################
    def traj_following_ctl( self , x , t = 0 ):
        """ 
        
        Given desired loaded trajectory and actual state, compute torques
        
        """
        
        [ q , dq ]         = self.model.x2q( x ) 
        
        ddq_d , dq_d , q_d = self.get_traj( t )

        ddq_r              = self.compute_ddq_r( ddq_d , dq_d , q_d , dq , q )
        
        u                  = self.rmin_forces( q , dq , ddq_r )
        
        return u
    
    
    ############################
    def rmin_forces( self, q , dq , ddq_r ):
        """ """
        
        # Cost is Q
        costs   = np.zeros( self.modes_options )
        efforts = np.zeros( ( self.modes_options , self.model.dof ) )
        
        #for all gear ratio options
        for k in range( self.modes_options ):
            
            efforts[k] = self.model.actuator_forces( q , dq , ddq_r , k )
            
            
            costs[k] = np.dot( efforts[k] , efforts[k] )
            
            """
            u = np.append( efforts[k] , k )
            x = self.model.q2x(q, dq)
            
            if self.model.isavalidinput( x , k ):
                # Cost is norm of torque
                costs[k] = np.dot( efforts[k] , efforts[k] )
            else:
                # Bad option
                costs[k] = 9999999999 # INF
            """
            
        # Optimal dsicrete mode
        k_star = costs.argmin()
        e_star = efforts[ k_star ]
        
        u = np.append( k_star , e_star )
        
        return u
        
        
    ############################
    def compute_ddq_r( self , ddq_d , dq_d , q_d , dq , q ):
        """ 
        
        Given desired trajectory and actual state, compute ddq_r
        
        """
        
        q_e   = q  -  q_d
        dq_e  = dq - dq_d
        
        ddq_r = ddq_d - 2 * self.zeta * self.w0 * dq_e - self.w0 ** 2 * q_e
        
        return ddq_r
    
        
    ############################
    def load_trajectory( self , traj  ):
        """ 
        
        Load Open-Loop trajectory solution to use as reference trajectory
        
        """
        
        self.trajectory = traj
        
        q   = traj.x[ :,    0           :     self.model.dof ]
        dq  = traj.x[ :, self.model.dof : 2 * self.model.dof ]
        ddq = traj.dx[:, self.model.dof : 2 * self.model.dof ]
        t   = traj.t
        
        # Create interpol functions
        self.q   = interp1d(t,q.T)
        self.dq  = interp1d(t,dq.T)
        self.ddq = interp1d(t,ddq.T)
        
        
    ############################
    def get_traj( self , t  ):
        """ 
        
        Find closest point on the trajectory
        
        """
        
        if t < self.trajectory.time_final :

            # Load trajectory
            q     = self.q(   t )
            dq    = self.dq(  t )
            ddq   = self.ddq( t )          

        else:
            
            q     = self.rbar
            dq    = np.zeros( self.model.dof )
            ddq   = np.zeros( self.model.dof )
        
        return ddq , dq , q
        
        
    #############################
    def c_trajectory_following( self , y , r , t ):
        """ 
        Feedback static computation u = c(y,r,t)
        
        INPUTS
        y  : sensor signal vector     p x 1
        r  : reference signal vector  k x 1
        t  : time                     1 x 1
        
        OUPUTS
        u  : control inputs vector    m x 1
        
        """
        
        x = y 
        
        u = self.traj_following_ctl( x , t )
        
        
        return u
    
    


'''
#################################################################
##################          Main                         ########
#################################################################
'''


if __name__ == "__main__":     
    """ MAIN TEST """
    
    from hybrid_mechanical import MultipleSpeedMechanicalSystem


    sys  = MultipleSpeedMechanicalSystem(1,2)
    
    sys.B_actuators[0,0] = 0.1
    sys.I_actuators[0,0] = 0.1
    
    ctl  = RminComputedTorqueController( sys )
    
    # New cl-dynamic
    cl_sys = ctl + sys
    
    cl_sys.x0 = np.array([2,0])
    cl_sys.compute_trajectory()
    #cl_sys.animate_simulation()
    cl_sys.plot_trajectory('xu')
        